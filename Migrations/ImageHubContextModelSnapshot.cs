// <auto-generated />
using System;
using ImageHubAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImageHubAPI.Migrations
{
    [DbContext(typeof(ImageHubContext))]
    partial class ImageHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("ImageHubAPI.Models.Friendship", b =>
                {
                    b.Property<string>("FriendshipId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("FriendId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserSenderId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("FriendshipId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("ImageHubAPI.Models.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = "38560b03-d8c8-4134-865e-87d4e1ea8eb1",
                            Path = "/23ad2a4f-c1f0-4abc-94c0-52854af2039e/github.png",
                            Title = "github.png",
                            UserId = "23ad2a4f-c1f0-4abc-94c0-52854af2039e"
                        },
                        new
                        {
                            ImageId = "4449e689-70c1-4917-9457-78b0b3e4aa38",
                            Path = "/23ad2a4f-c1f0-4abc-94c0-52854af2039e/logo.jpg",
                            Title = "logo.jpg",
                            UserId = "23ad2a4f-c1f0-4abc-94c0-52854af2039e"
                        },
                        new
                        {
                            ImageId = "04d7da38-62e4-4f92-a016-3a8cac8ecea8",
                            Path = "/55d8220f-2967-4342-8f6c-e6294a3e52c2/PngItem_6631012.png",
                            Title = "PngItem_6631012.png",
                            UserId = "55d8220f-2967-4342-8f6c-e6294a3e52c2"
                        },
                        new
                        {
                            ImageId = "c753ccde-eed7-4fa7-8338-55708b36a191",
                            Path = "/55d8220f-2967-4342-8f6c-e6294a3e52c2/man-search-for-hiring-job-online-from-laptop_1150-52728.jpg",
                            Title = "man-search-for-hiring-job-online-from-laptop_1150-52728.jpg",
                            UserId = "55d8220f-2967-4342-8f6c-e6294a3e52c2"
                        });
                });

            modelBuilder.Entity("ImageHubAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "55d8220f-2967-4342-8f6c-e6294a3e52c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7281e59-96c7-4013-835d-c66cf7251e09",
                            Email = "username_1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Username_1",
                            NormalizedEmail = "USERNAME_1@EXAMPLE.COM",
                            NormalizedUserName = "USERNAME_1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPQHRHIiWIlB6+j/YgzT3pY28k8TDDngVyqwVK8ra0ZojD51zwOMwpwA34yZk7xfng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e902d61-f69e-48ba-b4c4-0f99c0cfd308",
                            TwoFactorEnabled = false,
                            UserName = "username_1@example.com"
                        },
                        new
                        {
                            Id = "23ad2a4f-c1f0-4abc-94c0-52854af2039e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f74027d-eb4e-4a97-afd8-b94ff243733c",
                            Email = "username_2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Username_2",
                            NormalizedEmail = "USERNAME_2@EXAMPLE.COM",
                            NormalizedUserName = "USERNAME_2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENvwpY06Tnq1EplpjJgC1TYFuCSOJRV9Cq5905IrbPqIjxij+ClCoaF5MnCP8sHBhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1eb7c101-8f54-41e1-b65a-df7b5b3ded31",
                            TwoFactorEnabled = false,
                            UserName = "username_2@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ImageHubAPI.Models.Friendship", b =>
                {
                    b.HasOne("ImageHubAPI.Models.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("FriendId");

                    b.HasOne("ImageHubAPI.Models.User", null)
                        .WithMany("Friendships")
                        .HasForeignKey("UserId");

                    b.HasOne("ImageHubAPI.Models.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("UserSenderId");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("ImageHubAPI.Models.Image", b =>
                {
                    b.HasOne("ImageHubAPI.Models.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageHubAPI.Models.User", b =>
                {
                    b.Navigation("Friendships");

                    b.Navigation("UserImages");
                });
#pragma warning restore 612, 618
        }
    }
}
